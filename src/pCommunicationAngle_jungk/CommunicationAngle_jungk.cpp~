/************************************************************/
/*    NAME: Kimberly Jung                                              */
/*    ORGN: MIT                                             */
/*    FILE: CommunicationAngle_jungk.cpp                                        */
/*    DATE:                                                 */
/************************************************************/

#include <iterator>
#include "MBUtils.h"
#include <cstdlib>
#include "CommunicationAngle_jungk.h"

using namespace std;
bool debug = true;

//---------------------------------------------------------
// Constructor

CommunicationAngle_jungk::CommunicationAngle_jungk()
{
  R = 0;
  x_R=0;
  sperm_angle = 0;
  neptune_angle = 0;
  neptune_x = 0;
  neptune_y = 0;
  neptune_z = 0;
  sperm_x = 0;
  sperm_y = 0;
  sperm_z = 0;
  circle_x = 0;
  s=0;
  theta_N_0=0;
  theta_S_0=0;
  c_z0_N=0;
  c_z0_S=0;
  h1=0;
  h2=0;
}

//---------------------------------------------------------
// Destructor

CommunicationAngle_jungk::~CommunicationAngle_jungk()
{
}

//---------------------------------------------------------
// Procedure: OnNewMail

bool CommunicationAngle_jungk::OnNewMail(MOOSMSG_LIST &NewMail)
{
  MOOSMSG_LIST::iterator p;
   
  for(p=NewMail.begin(); p!=NewMail.end(); p++) {
    CMOOSMsg &msg = *p;
    string key   = msg.GetKey();
    double dval  = msg.GetDouble();

#if 0 // Keep these around just for template
    string comm  = msg.GetCommunity();
    string sval  = msg.GetString(); 
    string msrc  = msg.GetSource();
    double mtime = msg.GetTime();
    bool   mdbl  = msg.IsDouble();
    bool   mstr  = msg.IsString();
#endif
    
    if(key=="NEPTUNE_NAV_X") {neptune_x=dval;}
    if(key=="NEPTUNE_NAV_Y") {neptune_y=dval;}
    if(key=="NEPTUNE_NAV_DEPTH") {neptune_z=dval;}
    if(key=="NAV_X") {sperm_x=dval;}
    if(key=="NAV_Y") {sperm_y=dval;}
    if(key=="NAV_DEPTH") {sperm_z=dval;}
   }
  
	
   return(true);
}

//---------------------------------------------------------
// Procedure: OnConnectToServer

bool CommunicationAngle_jungk::OnConnectToServer()
{
   // register for variables here
   // possibly look at the mission file?
   // m_MissionReader.GetConfigurationParam("Name", <string>);
   // m_Comms.Register("VARNAME", 0);
	
   RegisterVariables();
   return(true);
}

//---------------------------------------------------------
// Procedure: Iterate()
//            happens AppTick times per second

bool CommunicationAngle_jungk::Iterate()
{
  Calcs();
  TransmissionLoss();
  if(z_max>max_depth){ };
  return(true);
}

//---------------------------------------------------------
// Procedure: OnStartUp()
//            happens before connection is open

bool CommunicationAngle_jungk::OnStartUp()
{
  list<string> sParams;
  m_MissionReader.EnableVerbatimQuoting(false);
  if(m_MissionReader.GetConfiguration(GetAppName(), sParams)) {
    list<string>::iterator p;
    for(p=sParams.begin(); p!=sParams.end(); p++) {
      string line  = *p;
      string param = tolower(biteStringX(line, '='));
      string value = line;
      
      if(param == "foo") {
        //handled
      }
      else if(param == "bar") {
        //handled
      }
    }
  }
  
  RegisterVariables();	
  return(true);
}

//---------------------------------------------------------
// Procedure: RegisterVariables

void CommunicationAngle_jungk::RegisterVariables()
{
  Register("VEHICLE_NAME", 0);
  Register("COLLABORATOR_NAME", 0);
  Register("NAV_X", 0);
  Register("NAV_Y", 0);
  Register("NAV_DEPTH", 0);
  Register("NAV_HEADING", 0);
  Register("NAV_SPEED", 0);
  Register("NEPTUNE_NAV_X", 0);
  Register("NEPTUNE_NAV_Y", 0);
  Register("NEPTUNE_NAV_DEPTH", 0);
  Register("NEPTUNE_NAV_HEADING", 0);
  Register("NEPTUNE_NAV_SPEED", 0);
}

bool CommunicationAngle_jungk::Calcs()
{
  h1=c_0/g+sperm_z;
  h2=c_0/g+neptune_z;
  range=sqrt(pow(sperm_x-neptune_x,2)+pow(sperm_y-neptune_y,2));//put x and y into r plane
  x_R=pow(neptune_z,2)/(2*range)+(c_0*neptune_z)/(g*range)+(range/2)-pow(sperm_z,2)/(2*range)-(sperm_z*c_0/(range*g));
  R=sqrt(pow(h1,2)+pow(x_R,2));
  Notify("RADIUS=",to_string(R));
  c_z0_N = c_0 + g*neptune_z; //sound speed at depth Neptune
  c_z0_S = c_0 + g*sperm_z; //sound speed at depth Spermwhale
  theta_S_0 = acos(c_z0_S/(R*g)); //Spermwhale's declination angle
  z_max = c_z0_S/(g*cos(theta_S_0))-c_0/g; //maximum depth, bottom of the virtual circle
  if(debug) {cout<<"R="<<to_string(R)<<",s="<<s<<",elevAngle_S="<<ConvertDegrees(theta_S_0)<<",z_max="<<z_max<<endl;}
  return true;
}

bool CommunicationAngle_jungk::HitFloor()
{
  //find a function for r will it be square root z=sqrt(----)
  //find minimum z by dz/dx==0
  //function z 
}

double CommunicationAngle_jungk::ConvertDegrees(double radians) const
{
  return(radians*180/pi);
}

double CommunicationAngle_jungk::TransmissionLoss()
{
  double new_R = c_z0_S/(g*cos(theta_S_0+angle_change));
  double new_range = sqrt(pow(new_R,2)-pow(h2,2));
  double J = (range/sin(theta_N_0))*((new_Range-range)/angle_change);
  double pressure_field = 1/(4*3.14159)*sqrt(c_z0_N*cos(theta_S_0)/(c_z0_S*J));
  if(debug) {cout<<"J="<<J<<",pressure="<<pressure_field<<endl;}
  double m_t_loss = -20*log10(pressure_field);
  Notify("TRANSMISSION_LOSS=",to_string(m_t_loss));
  return (m_t_loss);
}

double CommunicationAngle_jungk::FindJ()
{
}

//double CommnicationAngle_jungk::FindPressure()

