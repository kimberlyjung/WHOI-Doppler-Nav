/************************************************************/
/*    NAME: Kimberly Jung                                              */
/*    ORGN: MIT, 2.680, Lab 9                                   */
/*    FILE: PointsAssign.cpp                                        */
/*    DATE: 19MAR2019                                                */
/************************************************************/

#include <iterator>
#include "MBUtils.h"
#include "ACTable.h"
#include "PointAssign.h"
#include <string>
#include <iostream>

using namespace std;

//---------------------------------------------------------
// Constructor

PointAssign::PointAssign()
{
  m_finished=false;
  m_assign_by_region=true;
  m_x=0;
  m_y=0;
  m_id=0;
}

//---------------------------------------------------------
// Destructor

PointAssign::~PointAssign()
{
}

//---------------------------------------------------------
// Procedure: OnNewMail

bool PointAssign::OnNewMail(MOOSMSG_LIST &NewMail)
{
  AppCastingMOOSApp::OnNewMail(NewMail);

  MOOSMSG_LIST::iterator p;
  for(p=NewMail.begin(); p!=NewMail.end(); p++) {
    CMOOSMsg &msg = *p;
    string key    = msg.GetKey();
    string sval  = msg.GetString();

    if(key=="VISIT_POINT")
      {
	if(sval=="lastpoint")
	  {
	    m_finished = true;
	  }
	m_vector.push_back(sval);
      }
    else if(key=="ASSIGN_REGION") {m_assign_by_region=true;}
    
#if 0 // Keep these around just for template
    string comm  = msg.GetCommunity();
    double dval  = msg.GetDouble();
    string msrc  = msg.GetSource();
    double mtime = msg.GetTime();
    bool   mdbl  = msg.IsDouble();
    bool   mstr  = msg.IsString();
#endif

     if(key == "FOO") 
       cout << "great!";

     else if(key != "APPCAST_REQ") // handled by AppCastingMOOSApp
       reportRunWarning("Unhandled Mail: " + key);
   }
	
   return(true);
}

//---------------------------------------------------------
// Procedure: OnConnectToServer

bool PointAssign::OnConnectToServer()
{
   registerVariables();
   return(true);
}

//---------------------------------------------------------
// Procedure: Iterate()
//            happens AppTick times per second

bool PointAssign::Iterate()
{
  AppCastingMOOSApp::Iterate();
  if(m_finished){return true;}
  for(unsigned int i=0; i<m_vector.size(); i++)
    {
      if(m_vector[i]=="firstpoint" || m_vector[i]=="lastpoint")
	{
	  Notify("VISIT_POINT_GILDA", m_vector[i]);
	  Notify("VISIT_POINT_HENRY", m_vector[i]);
	}
      else if(!m_finished)
	{
	  if(!m_assign_by_region)
	    //assign to every other to Henry/Gilda
	    {
	      if(i%2==0)
		{
		  postViewPoint(m_x, m_y, m_vector[i], "red");
		  Notify("VISIT_POINT_HENRY", m_vector[i]);
		} 
	      else
		{
		  postViewPoint(m_x, m_y, m_vector[i], "yellow");
		  Notify("VISIT_POINT_GILDA", m_vector[i]);
		}
	    }
	  else
	    //assign by region to Henry/Gilda
	    {
	      m_x=stoi(tokStringParse(m_vector[i],"x", ',', '='));
              m_y=stoi(tokStringParse(m_vector[i],"y", ',', '='));
	      m_id=stoi(tokStringParse(m_vector[i],"id", ',', '='));

	      if(m_x>112) //HENRY=west
		{
		  postViewPoint(m_x, m_y, m_vector[i], "red");
		  Notify("VISIT_POINT_HENRY", m_vector[i]);
		} 
	      else //GILDA=east
		{
		  postViewPoint(m_x, m_y, m_vector[i], "yellow");
		  Notify("VISIT_POINT_GILDA", m_vector[i]);
		} 
	    }
         }
    }
  AppCastingMOOSApp::PostReport();
  return(true);
}

//---------------------------------------------------------
// Procedure: OnStartUp()
//            happens before connection is open

bool PointAssign::OnStartUp()
{
  AppCastingMOOSApp::OnStartUp();

  STRING_LIST sParams;
  m_MissionReader.EnableVerbatimQuoting(false);
  if(!m_MissionReader.GetConfiguration(GetAppName(), sParams))
    reportConfigWarning("No config block found for " + GetAppName());

  STRING_LIST::iterator p;
  for(p=sParams.begin(); p!=sParams.end(); p++) {
    string orig  = *p;
    string line  = *p;
    string param = tolower(biteStringX(line, '='));
    string value = line;

    bool handled = false;
    if(param == "foo") {
      handled = true;
    }
    else if(param == "bar") {
      handled = true;
    }

    if(!handled)
      reportUnhandledConfigWarning(orig);

  }
  
  registerVariables();	
  return(true);
}

//---------------------------------------------------------
// Procedure: registerVariables

void PointAssign::registerVariables()
{
  AppCastingMOOSApp::RegisterVariables();
  Register("VISIT_POINT", 0);
}


//------------------------------------------------------------
// Procedure: buildReport()

bool PointAssign::buildReport() 
{
  m_msgs << "============================================ \n";
  m_msgs << "File:                                        \n";
  m_msgs << "============================================ \n";

  ACTable actab(4);
  actab << "Alpha | Bravo | Charlie | Delta";
  actab.addHeaderLines();
  actab << "one" << "two" << "three" << "four";
  m_msgs << actab.getFormattedString();

  return(true);
}

//---------------------------------------------------------
//Procedure: postViewPoint

void PointAssign::postViewPoint(double x, double y, std::string label, std::string color)
{
  XYPoint point(x,y);
  point.set_label(label);
  point.set_color("vertex", color);
  point.set_param("vertex_size", "2");

  string spec = point.get_spec();
  Notify("VIEW_POINT", spec);
}
